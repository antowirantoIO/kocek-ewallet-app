// Copyright 2024 Fikret Şengül. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

import 'package:deps/packages/flutter_secure_storage.dart';
import 'package:deps/packages/get_it.dart';
import 'package:deps/packages/injectable.dart';

import './configure_di.config.dart';

/// Initializes and configures the dependency injection system for the application.
///
/// This function sets up the `GetIt` locator instance with configurations generated by the `injectable` package.
/// It should be called early in the app's lifecycle to ensure all dependencies are properly registered and available.
///
/// [di]: The `GetIt` instance used for dependency injection.
/// [env]: A string representing the current environment (e.g., 'dev', 'prod').
@InjectableInit(initializerName: 'init')
void configureDependencies(GetIt di, String env) {
  di.init(environment: env);
}

/// A module for providing an instance of `FlutterSecureStorage`.
///
/// This module is used by the `injectable` package to generate code for
/// dependency injection. It defines how an instance of `FlutterSecureStorage` should be
/// created and provided, configuring it with Android options for encrypted shared preferences.
@module
abstract class FlutterSecureStorageModule {
  /// Provides a configured instance of `FlutterSecureStorage`.
  ///
  /// This instance is configured with `AndroidOptions` to use encrypted shared preferences,
  /// enhancing the security of stored data on Android devices.
  FlutterSecureStorage get secureStorage => const FlutterSecureStorage(
        aOptions: AndroidOptions(
          encryptedSharedPreferences: true,
        ),
      );
}
